./level0 -> segfault
./level0 test -> No !

strings level0 -> bash: /usr/bin/strings: Input/output error

On a donc decide d'utiliser gdb pour voir ce qu'il se passait dans le programme

gdb level0
disas main

 0x08048ec0 <+0>:	push   %ebp
   0x08048ec1 <+1>:	mov    %esp,%ebp
   0x08048ec3 <+3>:	and    $0xfffffff0,%esp
   0x08048ec6 <+6>:	sub    $0x20,%esp
   0x08048ec9 <+9>:	mov    0xc(%ebp),%eax
   0x08048ecc <+12>:	add    $0x4,%eax
   0x08048ecf <+15>:	mov    (%eax),%eax
   0x08048ed1 <+17>:	mov    %eax,(%esp)
   0x08048ed4 <+20>:	call   0x8049710 <atoi> -> cette fonction a attire notre attention.
   0x08048ed9 <+25>:	cmp    $0x1a7,%eax
   0x08048ede <+30>:	jne    0x8048f58 <main+152>
   0x08048ee0 <+32>:	movl   $0x80c5348,(%esp)
   0x08048ee7 <+39>:	call   0x8050bf0 <strdup>

On a donc mis un breckpoint au niveau de atoi pour voir ses valeurs :
p $eax -> eax = 0

Si on faisait un step a ce moment la, le segfault apparaisait. On a constate que l'instruction juste apres etait une comparaison entre la valeur retournee par atoi et un hexadecimal  0x1a7.

On a donc cherche a quoi correspondait cette valeur en decimal, on a obtenu 423.

On a quitte gdb pour lancer le programme avec cette input.
./level03 423

Aucune erreur n'est apparue, on semblait etre sur un termial. On a est donc aller sur le home du user level1 pour cat le fichier .pass :
cd ../level1
cat .pass

flag : 1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a
